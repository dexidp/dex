// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package sdk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PasswordConnectorClient is the client API for PasswordConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PasswordConnectorClient interface {
	Prompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*PromptResp, error)
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error)
}

type passwordConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewPasswordConnectorClient(cc grpc.ClientConnInterface) PasswordConnectorClient {
	return &passwordConnectorClient{cc}
}

func (c *passwordConnectorClient) Prompt(ctx context.Context, in *PromptReq, opts ...grpc.CallOption) (*PromptResp, error) {
	out := new(PromptResp)
	err := c.cc.Invoke(ctx, "/sdk.PasswordConnector/Prompt", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordConnectorClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/sdk.PasswordConnector/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *passwordConnectorClient) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error) {
	out := new(RefreshResp)
	err := c.cc.Invoke(ctx, "/sdk.PasswordConnector/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PasswordConnectorServer is the server API for PasswordConnector service.
// All implementations must embed UnimplementedPasswordConnectorServer
// for forward compatibility
type PasswordConnectorServer interface {
	Prompt(context.Context, *PromptReq) (*PromptResp, error)
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Refresh(context.Context, *RefreshReq) (*RefreshResp, error)
	mustEmbedUnimplementedPasswordConnectorServer()
}

// UnimplementedPasswordConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedPasswordConnectorServer struct {
}

func (UnimplementedPasswordConnectorServer) Prompt(context.Context, *PromptReq) (*PromptResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Prompt not implemented")
}
func (UnimplementedPasswordConnectorServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedPasswordConnectorServer) Refresh(context.Context, *RefreshReq) (*RefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedPasswordConnectorServer) mustEmbedUnimplementedPasswordConnectorServer() {}

// UnsafePasswordConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PasswordConnectorServer will
// result in compilation errors.
type UnsafePasswordConnectorServer interface {
	mustEmbedUnimplementedPasswordConnectorServer()
}

func RegisterPasswordConnectorServer(s grpc.ServiceRegistrar, srv PasswordConnectorServer) {
	s.RegisterService(&PasswordConnector_ServiceDesc, srv)
}

func _PasswordConnector_Prompt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromptReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordConnectorServer).Prompt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.PasswordConnector/Prompt",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordConnectorServer).Prompt(ctx, req.(*PromptReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordConnector_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordConnectorServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.PasswordConnector/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordConnectorServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PasswordConnector_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PasswordConnectorServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.PasswordConnector/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PasswordConnectorServer).Refresh(ctx, req.(*RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PasswordConnector_ServiceDesc is the grpc.ServiceDesc for PasswordConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PasswordConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.PasswordConnector",
	HandlerType: (*PasswordConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Prompt",
			Handler:    _PasswordConnector_Prompt_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _PasswordConnector_Login_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _PasswordConnector_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector/external/sdk/sdk.proto",
}

// CallbackConnectorClient is the client API for CallbackConnector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CallbackConnectorClient interface {
	LoginURL(ctx context.Context, in *LoginURLReq, opts ...grpc.CallOption) (*LoginURLResp, error)
	HandleCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error)
	Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error)
}

type callbackConnectorClient struct {
	cc grpc.ClientConnInterface
}

func NewCallbackConnectorClient(cc grpc.ClientConnInterface) CallbackConnectorClient {
	return &callbackConnectorClient{cc}
}

func (c *callbackConnectorClient) LoginURL(ctx context.Context, in *LoginURLReq, opts ...grpc.CallOption) (*LoginURLResp, error) {
	out := new(LoginURLResp)
	err := c.cc.Invoke(ctx, "/sdk.CallbackConnector/LoginURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackConnectorClient) HandleCallback(ctx context.Context, in *CallbackReq, opts ...grpc.CallOption) (*CallbackResp, error) {
	out := new(CallbackResp)
	err := c.cc.Invoke(ctx, "/sdk.CallbackConnector/HandleCallback", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *callbackConnectorClient) Refresh(ctx context.Context, in *RefreshReq, opts ...grpc.CallOption) (*RefreshResp, error) {
	out := new(RefreshResp)
	err := c.cc.Invoke(ctx, "/sdk.CallbackConnector/Refresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CallbackConnectorServer is the server API for CallbackConnector service.
// All implementations must embed UnimplementedCallbackConnectorServer
// for forward compatibility
type CallbackConnectorServer interface {
	LoginURL(context.Context, *LoginURLReq) (*LoginURLResp, error)
	HandleCallback(context.Context, *CallbackReq) (*CallbackResp, error)
	Refresh(context.Context, *RefreshReq) (*RefreshResp, error)
	mustEmbedUnimplementedCallbackConnectorServer()
}

// UnimplementedCallbackConnectorServer must be embedded to have forward compatible implementations.
type UnimplementedCallbackConnectorServer struct {
}

func (UnimplementedCallbackConnectorServer) LoginURL(context.Context, *LoginURLReq) (*LoginURLResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LoginURL not implemented")
}
func (UnimplementedCallbackConnectorServer) HandleCallback(context.Context, *CallbackReq) (*CallbackResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleCallback not implemented")
}
func (UnimplementedCallbackConnectorServer) Refresh(context.Context, *RefreshReq) (*RefreshResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Refresh not implemented")
}
func (UnimplementedCallbackConnectorServer) mustEmbedUnimplementedCallbackConnectorServer() {}

// UnsafeCallbackConnectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CallbackConnectorServer will
// result in compilation errors.
type UnsafeCallbackConnectorServer interface {
	mustEmbedUnimplementedCallbackConnectorServer()
}

func RegisterCallbackConnectorServer(s grpc.ServiceRegistrar, srv CallbackConnectorServer) {
	s.RegisterService(&CallbackConnector_ServiceDesc, srv)
}

func _CallbackConnector_LoginURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginURLReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackConnectorServer).LoginURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.CallbackConnector/LoginURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackConnectorServer).LoginURL(ctx, req.(*LoginURLReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackConnector_HandleCallback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallbackReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackConnectorServer).HandleCallback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.CallbackConnector/HandleCallback",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackConnectorServer).HandleCallback(ctx, req.(*CallbackReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CallbackConnector_Refresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CallbackConnectorServer).Refresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sdk.CallbackConnector/Refresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CallbackConnectorServer).Refresh(ctx, req.(*RefreshReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CallbackConnector_ServiceDesc is the grpc.ServiceDesc for CallbackConnector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CallbackConnector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sdk.CallbackConnector",
	HandlerType: (*CallbackConnectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "LoginURL",
			Handler:    _CallbackConnector_LoginURL_Handler,
		},
		{
			MethodName: "HandleCallback",
			Handler:    _CallbackConnector_HandleCallback_Handler,
		},
		{
			MethodName: "Refresh",
			Handler:    _CallbackConnector_Refresh_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "connector/external/sdk/sdk.proto",
}
