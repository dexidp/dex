#!/bin/bash

set -e
if [ -z $CFSSL_HOSTS ]; then
  CFSSL_HOSTS='["127.0.0.1", "172.18.0.2"]'
fi

echo "Creating CA, server cert/key, and client cert/key..."

command=$(cat <<EOF
set -e

echo '{
  "CN": "fake-ca",
  "key": { "algo": "ecdsa", "size": 256 },
  "ca": { "expiry": "87600h" }
}' | cfssl gencert -initca - | cfssljson -bare ca

echo '{
  "signing": {
    "default": {
      "expiry": "87600h",
      "usages": [
        "critical",
        "signing",
        "key encipherment",
        "requestheader-client",
        "digital signature"
      ]
    }
  }
}' > config.json

echo '{
  "CN": "fake-server",
  "hosts": $CFSSL_HOSTS,
  "key": { "algo": "ecdsa", "size": 256 }
}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=config.json - | cfssljson -bare server

echo '{
  "CN": "fake-client",
  "hosts": $CFSSL_HOSTS,
  "key": { "algo": "ecdsa", "size": 256 }
}' | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=config.json - | cfssljson -bare client

# Prepare certificates
rm *.csr config.json

mv ca-key.pem ca.key
mv ca.pem ca.crt

mv server-key.pem server.key
mv server.pem server.crt

mv client-key.pem client.key
mv client.pem client.crt
EOF)

docker run --rm -v $(pwd):/workdir --entrypoint bash -w /workdir cfssl/cfssl:1.5.0 -c "$command"
