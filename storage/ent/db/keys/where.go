// Code generated by ent, DO NOT EDIT.

package keys

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Keys {
	return predicate.Keys(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Keys {
	return predicate.Keys(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Keys {
	return predicate.Keys(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Keys {
	return predicate.Keys(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Keys {
	return predicate.Keys(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Keys {
	return predicate.Keys(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Keys {
	return predicate.Keys(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Keys {
	return predicate.Keys(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Keys {
	return predicate.Keys(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Keys {
	return predicate.Keys(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Keys {
	return predicate.Keys(sql.FieldContainsFold(FieldID, id))
}

// NextRotation applies equality check predicate on the "next_rotation" field. It's identical to NextRotationEQ.
func NextRotation(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldEQ(FieldNextRotation, v))
}

// NextRotationEQ applies the EQ predicate on the "next_rotation" field.
func NextRotationEQ(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldEQ(FieldNextRotation, v))
}

// NextRotationNEQ applies the NEQ predicate on the "next_rotation" field.
func NextRotationNEQ(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldNEQ(FieldNextRotation, v))
}

// NextRotationIn applies the In predicate on the "next_rotation" field.
func NextRotationIn(vs ...time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldIn(FieldNextRotation, vs...))
}

// NextRotationNotIn applies the NotIn predicate on the "next_rotation" field.
func NextRotationNotIn(vs ...time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldNotIn(FieldNextRotation, vs...))
}

// NextRotationGT applies the GT predicate on the "next_rotation" field.
func NextRotationGT(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldGT(FieldNextRotation, v))
}

// NextRotationGTE applies the GTE predicate on the "next_rotation" field.
func NextRotationGTE(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldGTE(FieldNextRotation, v))
}

// NextRotationLT applies the LT predicate on the "next_rotation" field.
func NextRotationLT(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldLT(FieldNextRotation, v))
}

// NextRotationLTE applies the LTE predicate on the "next_rotation" field.
func NextRotationLTE(v time.Time) predicate.Keys {
	return predicate.Keys(sql.FieldLTE(FieldNextRotation, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Keys) predicate.Keys {
	return predicate.Keys(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Keys) predicate.Keys {
	return predicate.Keys(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Keys) predicate.Keys {
	return predicate.Keys(func(s *sql.Selector) {
		p(s.Not())
	})
}
