// Code generated by ent, DO NOT EDIT.

package db

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/dexidp/dex/storage/ent/db/authrequest"
)

// AuthRequest is the model entity for the AuthRequest schema.
type AuthRequest struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// ResponseTypes holds the value of the "response_types" field.
	ResponseTypes []string `json:"response_types,omitempty"`
	// RedirectURI holds the value of the "redirect_uri" field.
	RedirectURI string `json:"redirect_uri,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// State holds the value of the "state" field.
	State string `json:"state,omitempty"`
	// ForceApprovalPrompt holds the value of the "force_approval_prompt" field.
	ForceApprovalPrompt bool `json:"force_approval_prompt,omitempty"`
	// LoggedIn holds the value of the "logged_in" field.
	LoggedIn bool `json:"logged_in,omitempty"`
	// ClaimsUserID holds the value of the "claims_user_id" field.
	ClaimsUserID string `json:"claims_user_id,omitempty"`
	// ClaimsUsername holds the value of the "claims_username" field.
	ClaimsUsername string `json:"claims_username,omitempty"`
	// ClaimsEmail holds the value of the "claims_email" field.
	ClaimsEmail string `json:"claims_email,omitempty"`
	// ClaimsEmailVerified holds the value of the "claims_email_verified" field.
	ClaimsEmailVerified bool `json:"claims_email_verified,omitempty"`
	// ClaimsGroups holds the value of the "claims_groups" field.
	ClaimsGroups []string `json:"claims_groups,omitempty"`
	// ClaimsPreferredUsername holds the value of the "claims_preferred_username" field.
	ClaimsPreferredUsername string `json:"claims_preferred_username,omitempty"`
	// ConnectorID holds the value of the "connector_id" field.
	ConnectorID string `json:"connector_id,omitempty"`
	// ConnectorData holds the value of the "connector_data" field.
	ConnectorData *[]byte `json:"connector_data,omitempty"`
	// Expiry holds the value of the "expiry" field.
	Expiry time.Time `json:"expiry,omitempty"`
	// CodeChallenge holds the value of the "code_challenge" field.
	CodeChallenge string `json:"code_challenge,omitempty"`
	// CodeChallengeMethod holds the value of the "code_challenge_method" field.
	CodeChallengeMethod string `json:"code_challenge_method,omitempty"`
	// HmacKey holds the value of the "hmac_key" field.
	HmacKey      []byte `json:"hmac_key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthRequest) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authrequest.FieldScopes, authrequest.FieldResponseTypes, authrequest.FieldClaimsGroups, authrequest.FieldConnectorData, authrequest.FieldHmacKey:
			values[i] = new([]byte)
		case authrequest.FieldForceApprovalPrompt, authrequest.FieldLoggedIn, authrequest.FieldClaimsEmailVerified:
			values[i] = new(sql.NullBool)
		case authrequest.FieldID, authrequest.FieldClientID, authrequest.FieldRedirectURI, authrequest.FieldNonce, authrequest.FieldState, authrequest.FieldClaimsUserID, authrequest.FieldClaimsUsername, authrequest.FieldClaimsEmail, authrequest.FieldClaimsPreferredUsername, authrequest.FieldConnectorID, authrequest.FieldCodeChallenge, authrequest.FieldCodeChallengeMethod:
			values[i] = new(sql.NullString)
		case authrequest.FieldExpiry:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthRequest fields.
func (_m *AuthRequest) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authrequest.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				_m.ID = value.String
			}
		case authrequest.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				_m.ClientID = value.String
			}
		case authrequest.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case authrequest.FieldResponseTypes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field response_types", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ResponseTypes); err != nil {
					return fmt.Errorf("unmarshal field response_types: %w", err)
				}
			}
		case authrequest.FieldRedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field redirect_uri", values[i])
			} else if value.Valid {
				_m.RedirectURI = value.String
			}
		case authrequest.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				_m.Nonce = value.String
			}
		case authrequest.FieldState:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field state", values[i])
			} else if value.Valid {
				_m.State = value.String
			}
		case authrequest.FieldForceApprovalPrompt:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field force_approval_prompt", values[i])
			} else if value.Valid {
				_m.ForceApprovalPrompt = value.Bool
			}
		case authrequest.FieldLoggedIn:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field logged_in", values[i])
			} else if value.Valid {
				_m.LoggedIn = value.Bool
			}
		case authrequest.FieldClaimsUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_user_id", values[i])
			} else if value.Valid {
				_m.ClaimsUserID = value.String
			}
		case authrequest.FieldClaimsUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_username", values[i])
			} else if value.Valid {
				_m.ClaimsUsername = value.String
			}
		case authrequest.FieldClaimsEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email", values[i])
			} else if value.Valid {
				_m.ClaimsEmail = value.String
			}
		case authrequest.FieldClaimsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email_verified", values[i])
			} else if value.Valid {
				_m.ClaimsEmailVerified = value.Bool
			}
		case authrequest.FieldClaimsGroups:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field claims_groups", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.ClaimsGroups); err != nil {
					return fmt.Errorf("unmarshal field claims_groups: %w", err)
				}
			}
		case authrequest.FieldClaimsPreferredUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_preferred_username", values[i])
			} else if value.Valid {
				_m.ClaimsPreferredUsername = value.String
			}
		case authrequest.FieldConnectorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connector_id", values[i])
			} else if value.Valid {
				_m.ConnectorID = value.String
			}
		case authrequest.FieldConnectorData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field connector_data", values[i])
			} else if value != nil {
				_m.ConnectorData = value
			}
		case authrequest.FieldExpiry:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expiry", values[i])
			} else if value.Valid {
				_m.Expiry = value.Time
			}
		case authrequest.FieldCodeChallenge:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge", values[i])
			} else if value.Valid {
				_m.CodeChallenge = value.String
			}
		case authrequest.FieldCodeChallengeMethod:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code_challenge_method", values[i])
			} else if value.Valid {
				_m.CodeChallengeMethod = value.String
			}
		case authrequest.FieldHmacKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field hmac_key", values[i])
			} else if value != nil {
				_m.HmacKey = *value
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthRequest.
// This includes values selected through modifiers, order, etc.
func (_m *AuthRequest) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this AuthRequest.
// Note that you need to call AuthRequest.Unwrap() before calling this method if this AuthRequest
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *AuthRequest) Update() *AuthRequestUpdateOne {
	return NewAuthRequestClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the AuthRequest entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *AuthRequest) Unwrap() *AuthRequest {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("db: AuthRequest is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *AuthRequest) String() string {
	var builder strings.Builder
	builder.WriteString("AuthRequest(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("client_id=")
	builder.WriteString(_m.ClientID)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", _m.Scopes))
	builder.WriteString(", ")
	builder.WriteString("response_types=")
	builder.WriteString(fmt.Sprintf("%v", _m.ResponseTypes))
	builder.WriteString(", ")
	builder.WriteString("redirect_uri=")
	builder.WriteString(_m.RedirectURI)
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(_m.Nonce)
	builder.WriteString(", ")
	builder.WriteString("state=")
	builder.WriteString(_m.State)
	builder.WriteString(", ")
	builder.WriteString("force_approval_prompt=")
	builder.WriteString(fmt.Sprintf("%v", _m.ForceApprovalPrompt))
	builder.WriteString(", ")
	builder.WriteString("logged_in=")
	builder.WriteString(fmt.Sprintf("%v", _m.LoggedIn))
	builder.WriteString(", ")
	builder.WriteString("claims_user_id=")
	builder.WriteString(_m.ClaimsUserID)
	builder.WriteString(", ")
	builder.WriteString("claims_username=")
	builder.WriteString(_m.ClaimsUsername)
	builder.WriteString(", ")
	builder.WriteString("claims_email=")
	builder.WriteString(_m.ClaimsEmail)
	builder.WriteString(", ")
	builder.WriteString("claims_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", _m.ClaimsEmailVerified))
	builder.WriteString(", ")
	builder.WriteString("claims_groups=")
	builder.WriteString(fmt.Sprintf("%v", _m.ClaimsGroups))
	builder.WriteString(", ")
	builder.WriteString("claims_preferred_username=")
	builder.WriteString(_m.ClaimsPreferredUsername)
	builder.WriteString(", ")
	builder.WriteString("connector_id=")
	builder.WriteString(_m.ConnectorID)
	builder.WriteString(", ")
	if v := _m.ConnectorData; v != nil {
		builder.WriteString("connector_data=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteString(", ")
	builder.WriteString("expiry=")
	builder.WriteString(_m.Expiry.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("code_challenge=")
	builder.WriteString(_m.CodeChallenge)
	builder.WriteString(", ")
	builder.WriteString("code_challenge_method=")
	builder.WriteString(_m.CodeChallengeMethod)
	builder.WriteString(", ")
	builder.WriteString("hmac_key=")
	builder.WriteString(fmt.Sprintf("%v", _m.HmacKey))
	builder.WriteByte(')')
	return builder.String()
}

// AuthRequests is a parsable slice of AuthRequest.
type AuthRequests []*AuthRequest
