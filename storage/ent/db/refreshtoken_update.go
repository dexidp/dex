// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/predicate"
	"github.com/dexidp/dex/storage/ent/db/refreshtoken"
)

// RefreshTokenUpdate is the builder for updating RefreshToken entities.
type RefreshTokenUpdate struct {
	config
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (_u *RefreshTokenUpdate) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetClientID sets the "client_id" field.
func (_u *RefreshTokenUpdate) SetClientID(v string) *RefreshTokenUpdate {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClientID(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *RefreshTokenUpdate) SetScopes(v []string) *RefreshTokenUpdate {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *RefreshTokenUpdate) AppendScopes(v []string) *RefreshTokenUpdate {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *RefreshTokenUpdate) ClearScopes() *RefreshTokenUpdate {
	_u.mutation.ClearScopes()
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *RefreshTokenUpdate) SetNonce(v string) *RefreshTokenUpdate {
	_u.mutation.SetNonce(v)
	return _u
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableNonce(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetNonce(*v)
	}
	return _u
}

// SetClaimsUserID sets the "claims_user_id" field.
func (_u *RefreshTokenUpdate) SetClaimsUserID(v string) *RefreshTokenUpdate {
	_u.mutation.SetClaimsUserID(v)
	return _u
}

// SetNillableClaimsUserID sets the "claims_user_id" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClaimsUserID(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClaimsUserID(*v)
	}
	return _u
}

// SetClaimsUsername sets the "claims_username" field.
func (_u *RefreshTokenUpdate) SetClaimsUsername(v string) *RefreshTokenUpdate {
	_u.mutation.SetClaimsUsername(v)
	return _u
}

// SetNillableClaimsUsername sets the "claims_username" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClaimsUsername(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClaimsUsername(*v)
	}
	return _u
}

// SetClaimsEmail sets the "claims_email" field.
func (_u *RefreshTokenUpdate) SetClaimsEmail(v string) *RefreshTokenUpdate {
	_u.mutation.SetClaimsEmail(v)
	return _u
}

// SetNillableClaimsEmail sets the "claims_email" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClaimsEmail(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClaimsEmail(*v)
	}
	return _u
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (_u *RefreshTokenUpdate) SetClaimsEmailVerified(v bool) *RefreshTokenUpdate {
	_u.mutation.SetClaimsEmailVerified(v)
	return _u
}

// SetNillableClaimsEmailVerified sets the "claims_email_verified" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClaimsEmailVerified(v *bool) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClaimsEmailVerified(*v)
	}
	return _u
}

// SetClaimsGroups sets the "claims_groups" field.
func (_u *RefreshTokenUpdate) SetClaimsGroups(v []string) *RefreshTokenUpdate {
	_u.mutation.SetClaimsGroups(v)
	return _u
}

// AppendClaimsGroups appends value to the "claims_groups" field.
func (_u *RefreshTokenUpdate) AppendClaimsGroups(v []string) *RefreshTokenUpdate {
	_u.mutation.AppendClaimsGroups(v)
	return _u
}

// ClearClaimsGroups clears the value of the "claims_groups" field.
func (_u *RefreshTokenUpdate) ClearClaimsGroups() *RefreshTokenUpdate {
	_u.mutation.ClearClaimsGroups()
	return _u
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (_u *RefreshTokenUpdate) SetClaimsPreferredUsername(v string) *RefreshTokenUpdate {
	_u.mutation.SetClaimsPreferredUsername(v)
	return _u
}

// SetNillableClaimsPreferredUsername sets the "claims_preferred_username" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableClaimsPreferredUsername(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetClaimsPreferredUsername(*v)
	}
	return _u
}

// SetConnectorID sets the "connector_id" field.
func (_u *RefreshTokenUpdate) SetConnectorID(v string) *RefreshTokenUpdate {
	_u.mutation.SetConnectorID(v)
	return _u
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableConnectorID(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetConnectorID(*v)
	}
	return _u
}

// SetConnectorData sets the "connector_data" field.
func (_u *RefreshTokenUpdate) SetConnectorData(v []byte) *RefreshTokenUpdate {
	_u.mutation.SetConnectorData(v)
	return _u
}

// ClearConnectorData clears the value of the "connector_data" field.
func (_u *RefreshTokenUpdate) ClearConnectorData() *RefreshTokenUpdate {
	_u.mutation.ClearConnectorData()
	return _u
}

// SetToken sets the "token" field.
func (_u *RefreshTokenUpdate) SetToken(v string) *RefreshTokenUpdate {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableToken(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetObsoleteToken sets the "obsolete_token" field.
func (_u *RefreshTokenUpdate) SetObsoleteToken(v string) *RefreshTokenUpdate {
	_u.mutation.SetObsoleteToken(v)
	return _u
}

// SetNillableObsoleteToken sets the "obsolete_token" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableObsoleteToken(v *string) *RefreshTokenUpdate {
	if v != nil {
		_u.SetObsoleteToken(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RefreshTokenUpdate) SetCreatedAt(v time.Time) *RefreshTokenUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableCreatedAt(v *time.Time) *RefreshTokenUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetLastUsed sets the "last_used" field.
func (_u *RefreshTokenUpdate) SetLastUsed(v time.Time) *RefreshTokenUpdate {
	_u.mutation.SetLastUsed(v)
	return _u
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (_u *RefreshTokenUpdate) SetNillableLastUsed(v *time.Time) *RefreshTokenUpdate {
	if v != nil {
		_u.SetLastUsed(*v)
	}
	return _u
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (_u *RefreshTokenUpdate) Mutation() *RefreshTokenMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RefreshTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RefreshTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RefreshTokenUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RefreshTokenUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RefreshTokenUpdate) check() error {
	if v, ok := _u.mutation.ClientID(); ok {
		if err := refreshtoken.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nonce(); ok {
		if err := refreshtoken.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`db: validator failed for field "RefreshToken.nonce": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsUserID(); ok {
		if err := refreshtoken.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsUsername(); ok {
		if err := refreshtoken.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsEmail(); ok {
		if err := refreshtoken.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConnectorID(); ok {
		if err := refreshtoken.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.connector_id": %w`, err)}
		}
	}
	return nil
}

func (_u *RefreshTokenUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(refreshtoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(refreshtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, refreshtoken.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(refreshtoken.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(refreshtoken.FieldNonce, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsUserID(); ok {
		_spec.SetField(refreshtoken.FieldClaimsUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsUsername(); ok {
		_spec.SetField(refreshtoken.FieldClaimsUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsEmail(); ok {
		_spec.SetField(refreshtoken.FieldClaimsEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(refreshtoken.FieldClaimsEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ClaimsGroups(); ok {
		_spec.SetField(refreshtoken.FieldClaimsGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedClaimsGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, refreshtoken.FieldClaimsGroups, value)
		})
	}
	if _u.mutation.ClaimsGroupsCleared() {
		_spec.ClearField(refreshtoken.FieldClaimsGroups, field.TypeJSON)
	}
	if value, ok := _u.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(refreshtoken.FieldClaimsPreferredUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConnectorID(); ok {
		_spec.SetField(refreshtoken.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConnectorData(); ok {
		_spec.SetField(refreshtoken.FieldConnectorData, field.TypeBytes, value)
	}
	if _u.mutation.ConnectorDataCleared() {
		_spec.ClearField(refreshtoken.FieldConnectorData, field.TypeBytes)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(refreshtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.ObsoleteToken(); ok {
		_spec.SetField(refreshtoken.FieldObsoleteToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(refreshtoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastUsed(); ok {
		_spec.SetField(refreshtoken.FieldLastUsed, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RefreshTokenUpdateOne is the builder for updating a single RefreshToken entity.
type RefreshTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// SetClientID sets the "client_id" field.
func (_u *RefreshTokenUpdateOne) SetClientID(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetClientID(v)
	return _u
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClientID(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClientID(*v)
	}
	return _u
}

// SetScopes sets the "scopes" field.
func (_u *RefreshTokenUpdateOne) SetScopes(v []string) *RefreshTokenUpdateOne {
	_u.mutation.SetScopes(v)
	return _u
}

// AppendScopes appends value to the "scopes" field.
func (_u *RefreshTokenUpdateOne) AppendScopes(v []string) *RefreshTokenUpdateOne {
	_u.mutation.AppendScopes(v)
	return _u
}

// ClearScopes clears the value of the "scopes" field.
func (_u *RefreshTokenUpdateOne) ClearScopes() *RefreshTokenUpdateOne {
	_u.mutation.ClearScopes()
	return _u
}

// SetNonce sets the "nonce" field.
func (_u *RefreshTokenUpdateOne) SetNonce(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetNonce(v)
	return _u
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableNonce(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetNonce(*v)
	}
	return _u
}

// SetClaimsUserID sets the "claims_user_id" field.
func (_u *RefreshTokenUpdateOne) SetClaimsUserID(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsUserID(v)
	return _u
}

// SetNillableClaimsUserID sets the "claims_user_id" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClaimsUserID(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClaimsUserID(*v)
	}
	return _u
}

// SetClaimsUsername sets the "claims_username" field.
func (_u *RefreshTokenUpdateOne) SetClaimsUsername(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsUsername(v)
	return _u
}

// SetNillableClaimsUsername sets the "claims_username" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClaimsUsername(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClaimsUsername(*v)
	}
	return _u
}

// SetClaimsEmail sets the "claims_email" field.
func (_u *RefreshTokenUpdateOne) SetClaimsEmail(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsEmail(v)
	return _u
}

// SetNillableClaimsEmail sets the "claims_email" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClaimsEmail(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClaimsEmail(*v)
	}
	return _u
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (_u *RefreshTokenUpdateOne) SetClaimsEmailVerified(v bool) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsEmailVerified(v)
	return _u
}

// SetNillableClaimsEmailVerified sets the "claims_email_verified" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClaimsEmailVerified(v *bool) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClaimsEmailVerified(*v)
	}
	return _u
}

// SetClaimsGroups sets the "claims_groups" field.
func (_u *RefreshTokenUpdateOne) SetClaimsGroups(v []string) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsGroups(v)
	return _u
}

// AppendClaimsGroups appends value to the "claims_groups" field.
func (_u *RefreshTokenUpdateOne) AppendClaimsGroups(v []string) *RefreshTokenUpdateOne {
	_u.mutation.AppendClaimsGroups(v)
	return _u
}

// ClearClaimsGroups clears the value of the "claims_groups" field.
func (_u *RefreshTokenUpdateOne) ClearClaimsGroups() *RefreshTokenUpdateOne {
	_u.mutation.ClearClaimsGroups()
	return _u
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (_u *RefreshTokenUpdateOne) SetClaimsPreferredUsername(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetClaimsPreferredUsername(v)
	return _u
}

// SetNillableClaimsPreferredUsername sets the "claims_preferred_username" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableClaimsPreferredUsername(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetClaimsPreferredUsername(*v)
	}
	return _u
}

// SetConnectorID sets the "connector_id" field.
func (_u *RefreshTokenUpdateOne) SetConnectorID(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetConnectorID(v)
	return _u
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableConnectorID(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetConnectorID(*v)
	}
	return _u
}

// SetConnectorData sets the "connector_data" field.
func (_u *RefreshTokenUpdateOne) SetConnectorData(v []byte) *RefreshTokenUpdateOne {
	_u.mutation.SetConnectorData(v)
	return _u
}

// ClearConnectorData clears the value of the "connector_data" field.
func (_u *RefreshTokenUpdateOne) ClearConnectorData() *RefreshTokenUpdateOne {
	_u.mutation.ClearConnectorData()
	return _u
}

// SetToken sets the "token" field.
func (_u *RefreshTokenUpdateOne) SetToken(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetToken(v)
	return _u
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableToken(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetToken(*v)
	}
	return _u
}

// SetObsoleteToken sets the "obsolete_token" field.
func (_u *RefreshTokenUpdateOne) SetObsoleteToken(v string) *RefreshTokenUpdateOne {
	_u.mutation.SetObsoleteToken(v)
	return _u
}

// SetNillableObsoleteToken sets the "obsolete_token" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableObsoleteToken(v *string) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetObsoleteToken(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RefreshTokenUpdateOne) SetCreatedAt(v time.Time) *RefreshTokenUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableCreatedAt(v *time.Time) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetLastUsed sets the "last_used" field.
func (_u *RefreshTokenUpdateOne) SetLastUsed(v time.Time) *RefreshTokenUpdateOne {
	_u.mutation.SetLastUsed(v)
	return _u
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (_u *RefreshTokenUpdateOne) SetNillableLastUsed(v *time.Time) *RefreshTokenUpdateOne {
	if v != nil {
		_u.SetLastUsed(*v)
	}
	return _u
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (_u *RefreshTokenUpdateOne) Mutation() *RefreshTokenMutation {
	return _u.mutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (_u *RefreshTokenUpdateOne) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RefreshTokenUpdateOne) Select(field string, fields ...string) *RefreshTokenUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated RefreshToken entity.
func (_u *RefreshTokenUpdateOne) Save(ctx context.Context) (*RefreshToken, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RefreshTokenUpdateOne) SaveX(ctx context.Context) *RefreshToken {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RefreshTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RefreshTokenUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RefreshTokenUpdateOne) check() error {
	if v, ok := _u.mutation.ClientID(); ok {
		if err := refreshtoken.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.client_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Nonce(); ok {
		if err := refreshtoken.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`db: validator failed for field "RefreshToken.nonce": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsUserID(); ok {
		if err := refreshtoken.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_user_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsUsername(); ok {
		if err := refreshtoken.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_username": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ClaimsEmail(); ok {
		if err := refreshtoken.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`db: validator failed for field "RefreshToken.claims_email": %w`, err)}
		}
	}
	if v, ok := _u.mutation.ConnectorID(); ok {
		if err := refreshtoken.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`db: validator failed for field "RefreshToken.connector_id": %w`, err)}
		}
	}
	return nil
}

func (_u *RefreshTokenUpdateOne) sqlSave(ctx context.Context) (_node *RefreshToken, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`db: missing "RefreshToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtoken.FieldID)
		for _, f := range fields {
			if !refreshtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("db: invalid field %q for query", f)}
			}
			if f != refreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.ClientID(); ok {
		_spec.SetField(refreshtoken.FieldClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Scopes(); ok {
		_spec.SetField(refreshtoken.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, refreshtoken.FieldScopes, value)
		})
	}
	if _u.mutation.ScopesCleared() {
		_spec.ClearField(refreshtoken.FieldScopes, field.TypeJSON)
	}
	if value, ok := _u.mutation.Nonce(); ok {
		_spec.SetField(refreshtoken.FieldNonce, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsUserID(); ok {
		_spec.SetField(refreshtoken.FieldClaimsUserID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsUsername(); ok {
		_spec.SetField(refreshtoken.FieldClaimsUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsEmail(); ok {
		_spec.SetField(refreshtoken.FieldClaimsEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(refreshtoken.FieldClaimsEmailVerified, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ClaimsGroups(); ok {
		_spec.SetField(refreshtoken.FieldClaimsGroups, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedClaimsGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, refreshtoken.FieldClaimsGroups, value)
		})
	}
	if _u.mutation.ClaimsGroupsCleared() {
		_spec.ClearField(refreshtoken.FieldClaimsGroups, field.TypeJSON)
	}
	if value, ok := _u.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(refreshtoken.FieldClaimsPreferredUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConnectorID(); ok {
		_spec.SetField(refreshtoken.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := _u.mutation.ConnectorData(); ok {
		_spec.SetField(refreshtoken.FieldConnectorData, field.TypeBytes, value)
	}
	if _u.mutation.ConnectorDataCleared() {
		_spec.ClearField(refreshtoken.FieldConnectorData, field.TypeBytes)
	}
	if value, ok := _u.mutation.Token(); ok {
		_spec.SetField(refreshtoken.FieldToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.ObsoleteToken(); ok {
		_spec.SetField(refreshtoken.FieldObsoleteToken, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(refreshtoken.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.LastUsed(); ok {
		_spec.SetField(refreshtoken.FieldLastUsed, field.TypeTime, value)
	}
	_node = &RefreshToken{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
