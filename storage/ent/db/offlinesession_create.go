// Code generated by ent, DO NOT EDIT.

package db

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/dexidp/dex/storage/ent/db/offlinesession"
)

// OfflineSessionCreate is the builder for creating a OfflineSession entity.
type OfflineSessionCreate struct {
	config
	mutation *OfflineSessionMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (_c *OfflineSessionCreate) SetUserID(v string) *OfflineSessionCreate {
	_c.mutation.SetUserID(v)
	return _c
}

// SetConnID sets the "conn_id" field.
func (_c *OfflineSessionCreate) SetConnID(v string) *OfflineSessionCreate {
	_c.mutation.SetConnID(v)
	return _c
}

// SetRefresh sets the "refresh" field.
func (_c *OfflineSessionCreate) SetRefresh(v []byte) *OfflineSessionCreate {
	_c.mutation.SetRefresh(v)
	return _c
}

// SetConnectorData sets the "connector_data" field.
func (_c *OfflineSessionCreate) SetConnectorData(v []byte) *OfflineSessionCreate {
	_c.mutation.SetConnectorData(v)
	return _c
}

// SetID sets the "id" field.
func (_c *OfflineSessionCreate) SetID(v string) *OfflineSessionCreate {
	_c.mutation.SetID(v)
	return _c
}

// Mutation returns the OfflineSessionMutation object of the builder.
func (_c *OfflineSessionCreate) Mutation() *OfflineSessionMutation {
	return _c.mutation
}

// Save creates the OfflineSession in the database.
func (_c *OfflineSessionCreate) Save(ctx context.Context) (*OfflineSession, error) {
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *OfflineSessionCreate) SaveX(ctx context.Context) *OfflineSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OfflineSessionCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OfflineSessionCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *OfflineSessionCreate) check() error {
	if _, ok := _c.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`db: missing required field "OfflineSession.user_id"`)}
	}
	if v, ok := _c.mutation.UserID(); ok {
		if err := offlinesession.UserIDValidator(v); err != nil {
			return &ValidationError{Name: "user_id", err: fmt.Errorf(`db: validator failed for field "OfflineSession.user_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ConnID(); !ok {
		return &ValidationError{Name: "conn_id", err: errors.New(`db: missing required field "OfflineSession.conn_id"`)}
	}
	if v, ok := _c.mutation.ConnID(); ok {
		if err := offlinesession.ConnIDValidator(v); err != nil {
			return &ValidationError{Name: "conn_id", err: fmt.Errorf(`db: validator failed for field "OfflineSession.conn_id": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Refresh(); !ok {
		return &ValidationError{Name: "refresh", err: errors.New(`db: missing required field "OfflineSession.refresh"`)}
	}
	if v, ok := _c.mutation.ID(); ok {
		if err := offlinesession.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`db: validator failed for field "OfflineSession.id": %w`, err)}
		}
	}
	return nil
}

func (_c *OfflineSessionCreate) sqlSave(ctx context.Context) (*OfflineSession, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OfflineSession.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *OfflineSessionCreate) createSpec() (*OfflineSession, *sqlgraph.CreateSpec) {
	var (
		_node = &OfflineSession{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(offlinesession.Table, sqlgraph.NewFieldSpec(offlinesession.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.UserID(); ok {
		_spec.SetField(offlinesession.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := _c.mutation.ConnID(); ok {
		_spec.SetField(offlinesession.FieldConnID, field.TypeString, value)
		_node.ConnID = value
	}
	if value, ok := _c.mutation.Refresh(); ok {
		_spec.SetField(offlinesession.FieldRefresh, field.TypeBytes, value)
		_node.Refresh = value
	}
	if value, ok := _c.mutation.ConnectorData(); ok {
		_spec.SetField(offlinesession.FieldConnectorData, field.TypeBytes, value)
		_node.ConnectorData = &value
	}
	return _node, _spec
}

// OfflineSessionCreateBulk is the builder for creating many OfflineSession entities in bulk.
type OfflineSessionCreateBulk struct {
	config
	err      error
	builders []*OfflineSessionCreate
}

// Save creates the OfflineSession entities in the database.
func (_c *OfflineSessionCreateBulk) Save(ctx context.Context) ([]*OfflineSession, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*OfflineSession, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OfflineSessionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *OfflineSessionCreateBulk) SaveX(ctx context.Context) []*OfflineSession {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *OfflineSessionCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *OfflineSessionCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
